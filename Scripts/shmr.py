# -*- coding: utf-8 -*-
################################################################################
# Note: Generated by soapbox.wsdl2py at 2014-05-27 17:20:50.311867
#       Try to avoid editing it if you might need to regenerate it.
################################################################################


from soapbox import soap, xsd
from soapbox.xsd import UNBOUNDED


################################################################################
# Schemas


# shmr


class FastaType(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    alignments = xsd.ListElement(xsd.String, 'alignment', maxOccurs=1)
    groupsizess = xsd.ListElement(xsd.String, 'groupsizes', maxOccurs=1)

    @classmethod
    def create(cls, alignment, groupsizes):
        instance = cls()
        instance.alignment = alignment
        instance.groupsizes = groupsizes
        return instance


class ResultsResponseTypeWrapper(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    resultsResponse = xsd.Element(xsd.String)

    @classmethod
    def create(cls, resultsResponse):
        instance = cls()
        instance.resultsResponse = resultsResponse
        return instance


class ResultsResponseType(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    version = xsd.Element(xsd.String)
    result_url = xsd.Element(xsd.String)
    predictors = xsd.Element('PredictorsType')

    @classmethod
    def create(cls, version, result_url, predictors):
        instance = cls()
        instance.version = version
        instance.result_url = result_url
        instance.predictors = predictors
        return instance


class PredictorsType(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    predictors = xsd.ListElement('PredictorType', 'predictor', minOccurs=2, maxOccurs=2)

    @classmethod
    def create(cls):
        instance = cls()
        return instance


class PredictorType(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    name = xsd.Attribute(xsd.String, use=xsd.Use.REQUIRED)
    file = xsd.Element(xsd.String)
    positions = xsd.Element('PositionsType')

    @classmethod
    def create(cls, file, positions):
        instance = cls()
        instance.file = file
        instance.positions = positions
        return instance


class PositionsType(xsd.ComplexType):
    '''
    '''
    INHERITANCE = None
    INDICATOR = xsd.Sequence
    positions = xsd.ListElement('PosType', 'position', minOccurs=1, maxOccurs=UNBOUNDED)

    @classmethod
    def create(cls, position):
        instance = cls()
        instance.position = position
        return instance


class PosType(xsd.ComplexType):
    '''
    '''
    positions = xsd.ListElement('PosType', 'position', minOccurs=1, maxOccurs=UNBOUNDED)
Schema_4c1ac = xsd.Schema(
    imports=[],
    targetNamespace='shmr',
    elementFormDefault='unqualified',
    simpleTypes=[],
    attributeGroups=[],
    groups=[],
    complexTypes=[FastaType, ResultsResponseTypeWrapper, ResultsResponseType, PredictorsType, PredictorType, PositionsType, PosType],
    elements={'doSHMR': xsd.Element('FastaType'), 'doSHMRResponse': xsd.Element('ResultsResponseTypeWrapper')},
)


################################################################################
# Methods


doSHMR_method = xsd.Method(
    soapAction='shmr#doSHMR',
    input='doSHMR',
    inputPartName='parameters',
    output='doSHMRResponse',
    outputPartName='parameters',
    operationName='doSHMR',
)


################################################################################
# SOAP Service


IBIVU_Port_SERVICE = soap.Service(
    name='IBIVU_Port',
    targetNamespace='shmr',
    location='%(scheme)s://%(host)s/cgi-bin/shmr_srv.pl',
    schema=Schema_4c1ac,
    version=soap.SOAPVersion.SOAP11,
    methods=[doSHMR_method],
)


################################################################################
# SOAP Service Stub


class IBIVU_PortServiceStub(soap.Stub):
    '''
    '''
    SERVICE = IBIVU_Port_SERVICE
    SCHEME = 'http'
    HOST = 'zeus.few.vu.nl'

    def doSHMR(self, doSHMR):
        '''
        '''
        return self.call('doSHMR', doSHMR)


################################################################################
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
